// Code generated by "stringer -output opcode_string.go -type=Class,Size,Mode,Source,ALUOp,BranchOp"; DO NOT EDIT.

package asm

import "strconv"

const _Class_name = "LdClassLdXClassStClassStXClassALUClassJmpClassRetClassMiscClass"

var _Class_index = [...]uint8{0, 7, 15, 22, 30, 38, 46, 54, 63}

func (i Class) String() string {
	if i >= Class(len(_Class_index)-1) {
		return "Class(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Class_name[_Class_index[i]:_Class_index[i+1]]
}

const (
	_Size_name_0 = "WSize"
	_Size_name_1 = "HSize"
	_Size_name_2 = "BSize"
	_Size_name_3 = "DWSize"
	_Size_name_4 = "InvalidSize"
)

func (i Size) String() string {
	switch {
	case i == 0:
		return _Size_name_0
	case i == 8:
		return _Size_name_1
	case i == 16:
		return _Size_name_2
	case i == 24:
		return _Size_name_3
	case i == 255:
		return _Size_name_4
	default:
		return "Size(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Mode_name_0 = "ImmMode"
	_Mode_name_1 = "AbsMode"
	_Mode_name_2 = "IndMode"
	_Mode_name_3 = "MemMode"
	_Mode_name_4 = "LenMode"
	_Mode_name_5 = "MshMode"
	_Mode_name_6 = "XAddMode"
	_Mode_name_7 = "InvalidMode"
)

func (i Mode) String() string {
	switch {
	case i == 0:
		return _Mode_name_0
	case i == 32:
		return _Mode_name_1
	case i == 64:
		return _Mode_name_2
	case i == 96:
		return _Mode_name_3
	case i == 128:
		return _Mode_name_4
	case i == 160:
		return _Mode_name_5
	case i == 192:
		return _Mode_name_6
	case i == 255:
		return _Mode_name_7
	default:
		return "Mode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_Source_name_0 = "ImmSource"
	_Source_name_1 = "RegSource"
	_Source_name_2 = "InvalidSource"
)

func (i Source) String() string {
	switch {
	case i == 0:
		return _Source_name_0
	case i == 8:
		return _Source_name_1
	case i == 255:
		return _Source_name_2
	default:
		return "Source(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _ALUOp_name = "AddOpSubOpMulOpDivOpOrOpAndOpLShOpRShOpNegOpModOpXOrOpMovOpArShOpEndOpInvalidALUOp"

var _ALUOp_map = map[ALUOp]string{
	0:   _ALUOp_name[0:5],
	16:  _ALUOp_name[5:10],
	32:  _ALUOp_name[10:15],
	48:  _ALUOp_name[15:20],
	64:  _ALUOp_name[20:24],
	80:  _ALUOp_name[24:29],
	96:  _ALUOp_name[29:34],
	112: _ALUOp_name[34:39],
	128: _ALUOp_name[39:44],
	144: _ALUOp_name[44:49],
	160: _ALUOp_name[49:54],
	176: _ALUOp_name[54:59],
	192: _ALUOp_name[59:65],
	208: _ALUOp_name[65:70],
	255: _ALUOp_name[70:82],
}

func (i ALUOp) String() string {
	if str, ok := _ALUOp_map[i]; ok {
		return str
	}
	return "ALUOp(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _BranchOp_name = "JaOpJEqOpJGTOpJGEOpJSETOpJNEOpJSGTOpJSGEOpCallOpExitOpInvalidBranchOp"

var _BranchOp_map = map[BranchOp]string{
	0:   _BranchOp_name[0:4],
	16:  _BranchOp_name[4:9],
	32:  _BranchOp_name[9:14],
	48:  _BranchOp_name[14:19],
	64:  _BranchOp_name[19:25],
	80:  _BranchOp_name[25:30],
	96:  _BranchOp_name[30:36],
	112: _BranchOp_name[36:42],
	128: _BranchOp_name[42:48],
	144: _BranchOp_name[48:54],
	255: _BranchOp_name[54:69],
}

func (i BranchOp) String() string {
	if str, ok := _BranchOp_map[i]; ok {
		return str
	}
	return "BranchOp(" + strconv.FormatInt(int64(i), 10) + ")"
}
